<?php

/**
 * Placeholder implementation of hook_menu
 *
 * TODO Use or remove this hook
 */
function hosting_network_menu() {
  $items = array();
  $items['admin/hosting/network'] = array(
    'title' => 'Server Network settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_network_settings'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['hosting/network_nodes'] = array(
    'title' => 'Server network',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('hosting_network_nodes_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['hosting_network/task/%/%'] = array(
    'page callback' => 'hosting_network_view_task',
    'page arguments' => array(2, 3),
    // TODO: Permission
    'access arguments' => array('access task logs'),
  );

  return $items;
}

function hosting_network_view_task($server_nid, $task_nid) {
  $node = hosting_network_get_task($server_nid, $task_nid);

  if ($node) {
    $log = hosting_network_get_task_log($server_nid, $task_nid);

    $html = _hosting_network_task_log_table($log);
    return drupal_render($html);
  }
}

/**
 *  Helper function to get a task's info.
 */
function hosting_network_get_task($server_nid, $task_nid) {
  return hosting_network_rest_call($server_nid, 'hosting_task/' . $task_nid);
}

function hosting_network_get_task_log($server_nid, $task_nid) {
  return hosting_network_rest_call($server_nid, 'hosting_task/get_task_log', array('nid' => $task_nid), 'POST');
}

function hosting_network_nodes_form($form, &$form_state) {
  $network_nodes = hosting_get_servers('network_node');

  foreach($network_nodes as $nid => $hostname) {
    $node = node_load($nid);

    $prefix = '<fieldset class="collapsible" id="hosting-network-server-"' . $nid . '">';
    $prefix .= '<strong>Server: ' . $hostname . '</strong>';

    $form['hosting_network_' . $nid] = array(
      '#type' => 'markup',
      '#title' => t('Server'),
      '#markup' => _hosting_network_get_server_markup($nid),
      '#prefix' => $prefix,
      '#suffix' => '</fieldset>',
    );
  }

  return $form;
}

function _hosting_network_get_server_markup($nid) {
  // TODO: This is the local nid! Remove this. Make a list of servers?
  $platforms = hosting_network_get_platform_list($nid, TRUE);

  $html = '';
  $html .= '<div>';
  $html .= theme('hosting_network_platform_list', array('platforms' => $platforms));
  $html .= '</div>';

  return $html;
}

function hosting_network_theme($existing, $type, $theme, $path) {
  return array(
    'hosting_network_platform_list' => array(
      'variables' => array('platforms' => NULL),
    ),
  );
}

function theme_hosting_network_platform_list($variables) {
  $platforms = $variables['platforms'];

  $header = array(
    t('Platform'),
    t('Release'),
    t('Server'),
    t('Verified'),
    t('Sites'),
  );

  $rows[] = array();

  $total = 0;
  foreach ($platforms as $node) {
    $row = array();
    $row[] = array(
      'class' => array('hosting-status'),
      // TODO
      'data' => '<a href="/todo">' . $node->title . '</a>',
    );
    $release = sprintf("%s %s", $node->release->title, $node->release->version);
    $row[] = $release;
    $row[] = $node->web_server;
    $row[] = hosting_format_interval($node->verified);
    //TODO
    $total += 1;
    $row[] = count($node->sites);
    $rows[] = array(
      'data' => $row,
      'class' => array(_hosting_platform_list_class($node->platform_status)),
    );
  }
  $row = array();
  $row[] = array(
    'data' => t('Total sites hosted'),
    'colspan' => 4,
  );
  $row[] = $total;
  $rows[] = $row;

  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array('hosting-table'))));
}

/**
 * Returns a list of all platforms on a server with (option) all their sites.
 */
function hosting_network_get_platform_list($server_nid, $get_site_details = FALSE) {
  // GET call for the list of platforms
  // TODO: hosting_services a function to get all the details...
  $raw_platforms = hosting_network_rest_call($server_nid, 'hosting_platform');
  $platforms = array();

  // TODO: Will pagination come into play here??
  if ($get_site_details && !empty($raw_platforms)) {
    foreach ($raw_platforms as $raw_platform) {
      $platform = hosting_network_rest_call($server_nid, 'hosting_platform/' . $raw_platform->nid);

      $platform->sites = (array) hosting_network_rest_call($server_nid, 'hosting_platform/sites', array('nid' => $platform->nid), 'POST');

      $platforms[$platform->nid] = $platform;
    }
  }

  return $platforms;
}

function hosting_network_get_task_list($server_nid, $object_nid) {
  $tasks = hosting_network_rest_call($server_nid, 'hosting_task/get_task_list', array('nid' => $object_nid), 'POST');

  return (array) $tasks;
}

/**
 *  Authenticates and sends an OAuth-authenticated request based on the server.
 *
 * Only supports GET and POST requests for now:
 *  * https://www.drupal.org/node/2137333
 *  * https://www.drupal.org/node/2137349
 */
function hosting_network_rest_call($server_nid, $command, $command_params = array(), $method = 'GET', &$debug_info = array()) {
  $node = node_load($server_nid);

  // Only supports GET and POST, see function doc text.
  if ($method != 'GET' && $method != 'POST') {
    throw new Exception("HTTP method error: Only POST and GET requests are currently supported.");
  }

  if ($node) {
    $base_url = 'http://' . $node->title . '/hosting_network_node';
  }
  else {
    return;
  }
  $conskey = $node->services['network_node']->oauth_key;
  $conssec = $node->services['network_node']->oauth_secret;

  $consumer = new OAuthConsumer($conskey, $conssec, NULL);
  $api_url = $base_url . '/' . $command;
  $params = array();
  $request = OAuthRequest::from_consumer_and_token($consumer, NULL, $method, $api_url, $params);
  $test = $request->sign_request(new OAuthSignatureMethod_HMAC_SHA1(), $consumer, NULL);
  $data = http_build_query($command_params, '', '&');
  $options = array(
    'headers' => array(
      'Accept' => 'application/json',
    ),
    'method' => $method,
    'data' => $data,
  );

  $response = drupal_http_request($request->to_url(), $options);

  $debug_info = array(
    'api_url' => $api_url,
    'consumer' => $consumer,
    'response' => $response,
    'request' => $request,
    'options' => $options,
  );

  if($response->code == 200){
    return json_decode($response->data);
  }
}

function hosting_network_settings($form, &$form_state) {
  return system_settings_form($form);
}

/**
 * TODO: Implement hook_permission().
 */

/**
 * Implements hook_hosting_service_type().
 */
function hosting_network_hosting_service_type() {
  return array(
    'network_node' => array(// Machine name
      'title' => t('Network node'), // Human-readable name
      'weight' => 0, // Optional, defaults to 0
    ),
  );
}

/**
 * Implements hook_hosting_service().
 */
function hosting_network_hosting_service() {
  return array('hostmaster' => 'network_node'); // Service implementation => service type.
}

function hosting_network_task_table($tasklist, $server_nid) {
  $output = '';

  $headers[] = t('Task');
  $headers[] = array(
    'data' => t('Actions'),
    'class' => array('hosting-actions'),
  );

  $rows = array();

  if (empty($tasklist)) {
    return '';
  }

  foreach ($tasklist as $task => $info) {
    $row = array();

    $info = (array) $info;

    if (!isset($info['nid']) && !$info['task_permitted']) {
      // just don't show those tasks, since we'll not be able to run them
      continue;
    }

    $row['type'] = array(
      'data' => $info['title'],
      'class' => array('hosting-status'),
    );
    $actions = array();


    // TODO: The buttons, they do nothing.

    if (isset($info['task_status']) && ($info['task_status'] == 0)) {
//      $actions['cancel'] = _hosting_task_button(t('Cancel'), sprintf("hosting/tasks/%d/cancel", $info['nid']), t("Cancel the task and remove it from the queue"), 'hosting-button-stop', !$info['task_permitted']);
//      $actions['cancel'] = _hosting_task_button(t('Cancel'), sprintf("hosting/tasks/%d/cancel", $info['nid']), t("Cancel the task and remove it from the queue"), 'hosting-button-stop', !$info['task_permitted']);
    }
    else {
//      $actions['run'] = _hosting_task_button(t('Run'), sprintf("hosting_confirm/%d/%s_%s", 'TODO', 'TODO', $task), $info['description'], 'hosting-button-run', $info['task_permitted'], $info['dialog']);
      $actions['run'] = _hosting_task_button(t('Run'), sprintf("hosting_confirm/%d/%s_%s", 'TODO', 'TODO', $task), $info['description'], 'hosting-button-run', FALSE, $info['dialog']);
    }

    $actions['log'] = _hosting_task_button(t('View'), isset($info['nid']) ? 'hosting_network/task/' . $server_nid . '/' . $info['nid'] : '<front>', t("Display the task log"), 'hosting-button-log', isset($info['nid']), TRUE, FALSE);
    $row['actions'] = array(
      'data' => implode('', $actions),
      'class' => array('hosting-actions'),
    );

    $rows[] = array(
      'data' => $row,
      'class' => array($info['class']),
    );
  }
  $output .= theme('table', array('header' => $headers, 'rows' => $rows, 'attributes' => array('class' => array('hosting-table'))));
  return $output;
}

/**
 * Display table containing the logged information for this task
 */
function _hosting_network_task_log_table($log) {
  if (!empty($log)) {
    $headers = array('data' => 'Log message', 'execution_time' => 'Execution time');
    $rows = array();
    $last_timestamp = 0;
    $exec_time = '';
    $row_count = -1;
    foreach ($log as $entry) {
      if (strlen($entry->message) > 300) {
        $summary = "<span class='hosting-task-summary'>" . filter_xss(substr($entry->message, 0, 75), array()) . "... <a href='javascript:void(0)' class='hosting-summary-expand modalframe-exclude'>(" . t('Expand') . ')</a></span>';
        $message = $summary . "<span class='hosting-task-full'>" . filter_xss($entry->message) . '</span>';
      }
      else {
        $message = filter_xss($entry->message);
      }

      // Add error and warning anchors, so we can provide a quick link to them.
      if ($entry->type == 'error') {
        $message = '<a name="error"></a>' . $message;
      }
      elseif ($entry->type == 'warning') {
        $message = '<a name="warning"></a>' . $message;
      }

      // Add the exec_time to the previous row
      $exec_time = $entry->timestamp - $last_timestamp;

      // "1" is unreliable because timestamps don't allow sub-second granularity
      if ($exec_time < 1) {
        $exec_time = '<div>-</div>';
      }
      else if ($exec_time == 1) {
        $exec_time = '<div title="Many tasks take less than 1 second to perform. This duration represents an aggregate of the preceding tasks\' duration."><strong>' . $exec_time . ' s.</strong></div>';
      }
      else {
        $exec_time = '<div><strong>' . $exec_time . ' s.</strong></div>';
      }

      if ($row_count > -1) {
        $rows[$row_count]['data'][] = array(
          'data' => $exec_time,
        );
      }

      $row_count++;
      $last_timestamp = $entry->timestamp;

      $row = array(
        array(
          'data' => $message,
          'class' => array('hosting-status'),
        ),
      );

      $rows[] = array(
        'data' => $row,
        'class' => array(_hosting_task_log_class($entry->type)),
      );

      // Record that we've seen this log row.
      $last_lid = $entry->lid;
    }

    return array(
      '#theme' => "table",
      '#header' => $headers,
      '#rows' => $rows,
      '#attributes' => array(
        'id' => 'hosting-task-log',
        'class' => array(
          'hosting-table',
        ),
      ),
    );
  }

  return FALSE;
}
